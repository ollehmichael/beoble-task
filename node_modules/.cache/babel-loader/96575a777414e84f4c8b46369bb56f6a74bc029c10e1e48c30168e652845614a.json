{"ast":null,"code":"var _jsxFileName = \"/Users/michaelhan/Desktop/Dev/Projects/beoble-task/src/hooks/MetamaskProvider/MetamaskProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, createContext, useContext, useCallback } from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { formatBalance } from '../../utils';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst disconnectedState = {\n  accounts: [],\n  balance: '',\n  chainId: ''\n};\nconst MetaMaskContext = /*#__PURE__*/createContext({});\nexport const MetaMaskContextProvider = ({\n  children\n}) => {\n  _s();\n  const [hasProvider, setHasProvider] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const clearError = () => setErrorMessage('');\n  const [wallet, setWallet] = useState(disconnectedState);\n  const _updateWallet = useCallback(async providedAccounts => {\n    const accounts = providedAccounts || (await window.ethereum.request({\n      method: 'eth_accounts'\n    }));\n    if (accounts.length === 0) {\n      setWallet(disconnectedState);\n      return;\n    }\n    const balance = formatBalance(await window.ethereum.request({\n      method: 'eth_getBalance',\n      params: [accounts[0], 'latest']\n    }));\n    const chainId = await window.ethereum.request({\n      method: 'eth_chainId'\n    });\n    setWallet({\n      accounts,\n      balance,\n      chainId\n    });\n  }, []);\n  const updateWalletAndAccounts = useCallback(() => _updateWallet(), [_updateWallet]);\n  const updateWallet = useCallback(accounts => _updateWallet(accounts), [_updateWallet]);\n  useEffect(() => {\n    const getProvider = async () => {\n      const provider = await detectEthereumProvider({\n        silent: true\n      });\n      setHasProvider(Boolean(provider));\n      if (provider) {\n        updateWalletAndAccounts();\n        window.ethereum.on('accountsChanged', updateWallet);\n        window.ethereum.on('chainChanged', updateWalletAndAccounts);\n      }\n    };\n    getProvider();\n    return () => {\n      var _window$ethereum, _window$ethereum2;\n      (_window$ethereum = window.ethereum) === null || _window$ethereum === void 0 ? void 0 : _window$ethereum.removeListener('accountsChanged', updateWallet);\n      (_window$ethereum2 = window.ethereum) === null || _window$ethereum2 === void 0 ? void 0 : _window$ethereum2.removeListener('chainChanged', updateWalletAndAccounts);\n    };\n  }, [updateWallet, updateWalletAndAccounts]);\n  const connectMetaMask = async () => {\n    setIsConnecting(true);\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      clearError();\n      updateWallet(accounts);\n    } catch (err) {\n      setErrorMessage(err.message);\n    }\n    setIsConnecting(false);\n  };\n  const signMessage = async (message, account) => {\n    setIsConnecting(true);\n    try {\n      var _window$ethereum3;\n      const signedData = await ((_window$ethereum3 = window.ethereum) === null || _window$ethereum3 === void 0 ? void 0 : _window$ethereum3.request({\n        method: 'personal_sign',\n        params: [JSON.stringify(message), account]\n      }));\n      const {\n        r,\n        s,\n        v\n      } = ethers.utils.splitSignature(signedData);\n      const recoveredPublicKey = ethers.utils.recoverPublicKey(ethers.utils.arrayify(signedData), {\n        r,\n        s,\n        v\n      });\n      console.log(recoveredPublicKey);\n      console.log(signedData);\n      return {\n        publicKey: recoveredPublicKey,\n        signedHash: signedData\n      };\n    } catch (err) {\n      setErrorMessage(err.message);\n      return {\n        publicKey: null,\n        signedHash: null\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MetaMaskContext.Provider, {\n    value: {\n      wallet,\n      hasProvider,\n      error: !!errorMessage,\n      errorMessage,\n      isConnecting,\n      connectMetaMask,\n      signMessage,\n      clearError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(MetaMaskContextProvider, \"8RnmGgzkz+r828S2/Mrj1Fm5dvU=\");\n_c = MetaMaskContextProvider;\nexport const useMetaMask = () => {\n  _s2();\n  const context = useContext(MetaMaskContext);\n  if (context === undefined) {\n    throw new Error('useMetaMask must be used within a \"MetaMaskContextProvider\"');\n  }\n  return context;\n};\n_s2(useMetaMask, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"MetaMaskContextProvider\");","map":{"version":3,"names":["React","useState","useEffect","createContext","useContext","useCallback","detectEthereumProvider","formatBalance","ethers","jsxDEV","_jsxDEV","disconnectedState","accounts","balance","chainId","MetaMaskContext","MetaMaskContextProvider","children","_s","hasProvider","setHasProvider","isConnecting","setIsConnecting","errorMessage","setErrorMessage","clearError","wallet","setWallet","_updateWallet","providedAccounts","window","ethereum","request","method","length","params","updateWalletAndAccounts","updateWallet","getProvider","provider","silent","Boolean","on","_window$ethereum","_window$ethereum2","removeListener","connectMetaMask","err","message","signMessage","account","_window$ethereum3","signedData","JSON","stringify","r","s","v","utils","splitSignature","recoveredPublicKey","recoverPublicKey","arrayify","console","log","publicKey","signedHash","Provider","value","error","fileName","_jsxFileName","lineNumber","columnNumber","_c","useMetaMask","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/Users/michaelhan/Desktop/Dev/Projects/beoble-task/src/hooks/MetamaskProvider/MetamaskProvider.tsx"],"sourcesContent":["import React, { useState, useEffect, createContext, PropsWithChildren, useContext, useCallback } from 'react';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { formatBalance } from '../../utils';\nimport { accounts } from 'web3/lib/commonjs/eth.exports';\nimport { ethers } from 'ethers';\n\nexport interface WalletState {\n  accounts: any[];\n  balance: string;\n  chainId: string;\n}\n\ninterface MetaMaskContextData {\n  wallet: WalletState;\n  hasProvider: boolean | null;\n  error: boolean;\n  errorMessage: string;\n  isConnecting: boolean;\n  connectMetaMask: () => void;\n  signMessage: (message: string, account: string) => Promise<{ publicKey: string | null; signedHash: string | null }>;\n  clearError: () => void;\n}\n\nconst disconnectedState: WalletState = {\n  accounts: [],\n  balance: '',\n  chainId: '',\n};\n\nconst MetaMaskContext = createContext<MetaMaskContextData>({} as MetaMaskContextData);\n\nexport const MetaMaskContextProvider = ({ children }: PropsWithChildren) => {\n  const [hasProvider, setHasProvider] = useState<boolean | null>(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const clearError = () => setErrorMessage('');\n  const [wallet, setWallet] = useState(disconnectedState);\n\n  const _updateWallet = useCallback(async (providedAccounts?: any) => {\n    const accounts = providedAccounts || (await window.ethereum.request({ method: 'eth_accounts' }));\n\n    if (accounts.length === 0) {\n      setWallet(disconnectedState);\n      return;\n    }\n\n    const balance = formatBalance(\n      await window.ethereum.request({\n        method: 'eth_getBalance',\n        params: [accounts[0], 'latest'],\n      })\n    );\n\n    const chainId = await window.ethereum.request({\n      method: 'eth_chainId',\n    });\n\n    setWallet({ accounts, balance, chainId });\n  }, []);\n\n  const updateWalletAndAccounts = useCallback(() => _updateWallet(), [_updateWallet]);\n  const updateWallet = useCallback((accounts: any) => _updateWallet(accounts), [_updateWallet]);\n\n  useEffect(() => {\n    const getProvider = async () => {\n      const provider = await detectEthereumProvider({ silent: true });\n      setHasProvider(Boolean(provider));\n\n      if (provider) {\n        updateWalletAndAccounts();\n        window.ethereum.on('accountsChanged', updateWallet);\n        window.ethereum.on('chainChanged', updateWalletAndAccounts);\n      }\n    };\n\n    getProvider();\n\n    return () => {\n      window.ethereum?.removeListener('accountsChanged', updateWallet);\n      window.ethereum?.removeListener('chainChanged', updateWalletAndAccounts);\n    };\n  }, [updateWallet, updateWalletAndAccounts]);\n\n  const connectMetaMask = async () => {\n    setIsConnecting(true);\n\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n      clearError();\n      updateWallet(accounts);\n    } catch (err: any) {\n      setErrorMessage(err.message);\n    }\n    setIsConnecting(false);\n  };\n\n  const signMessage = async (message: string, account: string) => {\n    setIsConnecting(true);\n\n    try {\n      const signedData: string = await window.ethereum?.request({\n        method: 'personal_sign',\n        params: [JSON.stringify(message), account],\n      });\n      const { r, s, v } = ethers.utils.splitSignature(signedData);\n      const recoveredPublicKey = ethers.utils.recoverPublicKey(ethers.utils.arrayify(signedData), { r, s, v });\n      console.log(recoveredPublicKey);\n      console.log(signedData);\n      return { publicKey: recoveredPublicKey, signedHash: signedData };\n    } catch (err: any) {\n      setErrorMessage(err.message);\n      return { publicKey: null, signedHash: null };\n    }\n  };\n\n  return (\n    <MetaMaskContext.Provider\n      value={{\n        wallet,\n        hasProvider,\n        error: !!errorMessage,\n        errorMessage,\n        isConnecting,\n        connectMetaMask,\n        signMessage,\n        clearError,\n      }}>\n      {children}\n    </MetaMaskContext.Provider>\n  );\n};\n\nexport const useMetaMask = () => {\n  const context = useContext(MetaMaskContext);\n  if (context === undefined) {\n    throw new Error('useMetaMask must be used within a \"MetaMaskContextProvider\"');\n  }\n  return context;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}